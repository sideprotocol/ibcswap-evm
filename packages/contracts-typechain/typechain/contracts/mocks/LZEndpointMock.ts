/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LZEndpointMockInterface extends utils.Interface {
  functions: {
    "blockNextMsg()": FunctionFragment;
    "defaultAdapterParams()": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "forceResumeReceive(uint16,bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getConfig(uint16,uint16,address,uint256)": FunctionFragment;
    "getInboundNonce(uint16,bytes)": FunctionFragment;
    "getLengthOfQueue(uint16,bytes)": FunctionFragment;
    "getOutboundNonce(uint16,address)": FunctionFragment;
    "getReceiveLibraryAddress(address)": FunctionFragment;
    "getReceiveVersion(address)": FunctionFragment;
    "getSendLibraryAddress(address)": FunctionFragment;
    "getSendVersion(address)": FunctionFragment;
    "hasStoredPayload(uint16,bytes)": FunctionFragment;
    "inboundNonce(uint16,bytes)": FunctionFragment;
    "isReceivingPayload()": FunctionFragment;
    "isSendingPayload()": FunctionFragment;
    "lzEndpointLookup(address)": FunctionFragment;
    "mockChainId()": FunctionFragment;
    "msgsToDeliver(uint16,bytes,uint256)": FunctionFragment;
    "nextMsgBlocked()": FunctionFragment;
    "oracleFee()": FunctionFragment;
    "outboundNonce(uint16,address)": FunctionFragment;
    "protocolFeeConfig()": FunctionFragment;
    "receivePayload(uint16,bytes,address,uint64,uint256,bytes)": FunctionFragment;
    "relayerFeeConfig()": FunctionFragment;
    "retryPayload(uint16,bytes,bytes)": FunctionFragment;
    "send(uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
    "setConfig(uint16,uint16,uint256,bytes)": FunctionFragment;
    "setDefaultAdapterParams(bytes)": FunctionFragment;
    "setDestLzEndpoint(address,address)": FunctionFragment;
    "setOracleFee(uint256)": FunctionFragment;
    "setProtocolFee(uint256,uint256)": FunctionFragment;
    "setReceiveVersion(uint16)": FunctionFragment;
    "setRelayerPrice(uint128,uint128,uint128,uint64,uint64)": FunctionFragment;
    "setSendVersion(uint16)": FunctionFragment;
    "storedPayload(uint16,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockNextMsg"
      | "defaultAdapterParams"
      | "estimateFees"
      | "forceResumeReceive"
      | "getChainId"
      | "getConfig"
      | "getInboundNonce"
      | "getLengthOfQueue"
      | "getOutboundNonce"
      | "getReceiveLibraryAddress"
      | "getReceiveVersion"
      | "getSendLibraryAddress"
      | "getSendVersion"
      | "hasStoredPayload"
      | "inboundNonce"
      | "isReceivingPayload"
      | "isSendingPayload"
      | "lzEndpointLookup"
      | "mockChainId"
      | "msgsToDeliver"
      | "nextMsgBlocked"
      | "oracleFee"
      | "outboundNonce"
      | "protocolFeeConfig"
      | "receivePayload"
      | "relayerFeeConfig"
      | "retryPayload"
      | "send"
      | "setConfig"
      | "setDefaultAdapterParams"
      | "setDestLzEndpoint"
      | "setOracleFee"
      | "setProtocolFee"
      | "setReceiveVersion"
      | "setRelayerPrice"
      | "setSendVersion"
      | "storedPayload"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockNextMsg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdapterParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLengthOfQueue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveLibraryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendLibraryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStoredPayload",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isReceivingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSendingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpointLookup",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "msgsToDeliver",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMsgBlocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracleFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outboundNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePayload",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryPayload",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultAdapterParams",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestLzEndpoint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storedPayload",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockNextMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLengthOfQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStoredPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReceivingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSendingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzEndpointLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "msgsToDeliver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMsgBlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestLzEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedPayload",
    data: BytesLike
  ): Result;

  events: {
    "PayloadCleared(uint16,bytes,uint64,address)": EventFragment;
    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)": EventFragment;
    "UaForceResumeReceive(uint16,bytes)": EventFragment;
    "ValueTransferFailed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayloadCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UaForceResumeReceive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueTransferFailed"): EventFragment;
}

export interface PayloadClearedEventObject {
  srcChainId: number;
  srcAddress: string;
  nonce: BigNumber;
  dstAddress: string;
}
export type PayloadClearedEvent = TypedEvent<
  [number, string, BigNumber, string],
  PayloadClearedEventObject
>;

export type PayloadClearedEventFilter = TypedEventFilter<PayloadClearedEvent>;

export interface PayloadStoredEventObject {
  srcChainId: number;
  srcAddress: string;
  dstAddress: string;
  nonce: BigNumber;
  payload: string;
  reason: string;
}
export type PayloadStoredEvent = TypedEvent<
  [number, string, string, BigNumber, string, string],
  PayloadStoredEventObject
>;

export type PayloadStoredEventFilter = TypedEventFilter<PayloadStoredEvent>;

export interface UaForceResumeReceiveEventObject {
  chainId: number;
  srcAddress: string;
}
export type UaForceResumeReceiveEvent = TypedEvent<
  [number, string],
  UaForceResumeReceiveEventObject
>;

export type UaForceResumeReceiveEventFilter =
  TypedEventFilter<UaForceResumeReceiveEvent>;

export interface ValueTransferFailedEventObject {
  to: string;
  quantity: BigNumber;
}
export type ValueTransferFailedEvent = TypedEvent<
  [string, BigNumber],
  ValueTransferFailedEventObject
>;

export type ValueTransferFailedEventFilter =
  TypedEventFilter<ValueTransferFailedEvent>;

export interface LZEndpointMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LZEndpointMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockNextMsg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<[string]>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[number]>;

    getConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLengthOfQueue(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReceiveLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReceiveVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSendLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSendVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasStoredPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isReceivingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    isSendingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    lzEndpointLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mockChainId(overrides?: CallOverrides): Promise<[number]>;

    msgsToDeliver(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nextMsgBlocked(overrides?: CallOverrides): Promise<[boolean]>;

    oracleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    outboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
    >;

    receivePayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _dstAddress: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relayerFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    retryPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultAdapterParams(
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDestLzEndpoint(
      destAddr: PromiseOrValue<string>,
      lzEndpointAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleFee(
      _oracleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _zroFee: PromiseOrValue<BigNumberish>,
      _nativeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReceiveVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerPrice(
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSendVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storedPayload(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;
  };

  blockNextMsg(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultAdapterParams(overrides?: CallOverrides): Promise<string>;

  estimateFees(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _userApplication: PromiseOrValue<string>,
    _payload: PromiseOrValue<BytesLike>,
    _payInZRO: PromiseOrValue<boolean>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  forceResumeReceive(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<number>;

  getConfig(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInboundNonce(
    _chainID: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLengthOfQueue(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutboundNonce(
    _chainID: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceiveLibraryAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReceiveVersion(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getSendLibraryAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSendVersion(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  hasStoredPayload(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inboundNonce(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

  isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

  lzEndpointLookup(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  mockChainId(overrides?: CallOverrides): Promise<number>;

  msgsToDeliver(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      dstAddress: string;
      nonce: BigNumber;
      payload: string;
    }
  >;

  nextMsgBlocked(overrides?: CallOverrides): Promise<boolean>;

  oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

  outboundNonce(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  protocolFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
  >;

  receivePayload(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    _dstAddress: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relayerFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      dstPriceRatio: BigNumber;
      dstGasPriceInWei: BigNumber;
      dstNativeAmtCap: BigNumber;
      baseGas: BigNumber;
      gasPerByte: BigNumber;
    }
  >;

  retryPayload(
    _srcChainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _chainId: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<BytesLike>,
    _payload: PromiseOrValue<BytesLike>,
    _refundAddress: PromiseOrValue<string>,
    _zroPaymentAddress: PromiseOrValue<string>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultAdapterParams(
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDestLzEndpoint(
    destAddr: PromiseOrValue<string>,
    lzEndpointAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleFee(
    _oracleFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _zroFee: PromiseOrValue<BigNumberish>,
    _nativeBP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReceiveVersion(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerPrice(
    _dstPriceRatio: PromiseOrValue<BigNumberish>,
    _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
    _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
    _baseGas: PromiseOrValue<BigNumberish>,
    _gasPerByte: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSendVersion(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storedPayload(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      payloadLength: BigNumber;
      dstAddress: string;
      payloadHash: string;
    }
  >;

  callStatic: {
    blockNextMsg(overrides?: CallOverrides): Promise<void>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<string>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainId(overrides?: CallOverrides): Promise<number>;

    getConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReceiveVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getSendLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSendVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    hasStoredPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

    isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

    lzEndpointLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    mockChainId(overrides?: CallOverrides): Promise<number>;

    msgsToDeliver(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nextMsgBlocked(overrides?: CallOverrides): Promise<boolean>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
    >;

    receivePayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _dstAddress: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    relayerFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    retryPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultAdapterParams(
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestLzEndpoint(
      destAddr: PromiseOrValue<string>,
      lzEndpointAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleFee(
      _oracleFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _zroFee: PromiseOrValue<BigNumberish>,
      _nativeBP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiveVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerPrice(
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storedPayload(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;
  };

  filters: {
    "PayloadCleared(uint16,bytes,uint64,address)"(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): PayloadClearedEventFilter;
    PayloadCleared(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): PayloadClearedEventFilter;

    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)"(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): PayloadStoredEventFilter;
    PayloadStored(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): PayloadStoredEventFilter;

    "UaForceResumeReceive(uint16,bytes)"(
      chainId?: null,
      srcAddress?: null
    ): UaForceResumeReceiveEventFilter;
    UaForceResumeReceive(
      chainId?: null,
      srcAddress?: null
    ): UaForceResumeReceiveEventFilter;

    "ValueTransferFailed(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ValueTransferFailedEventFilter;
    ValueTransferFailed(
      to?: PromiseOrValue<string> | null,
      quantity?: PromiseOrValue<BigNumberish> | null
    ): ValueTransferFailedEventFilter;
  };

  estimateGas: {
    blockNextMsg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceResumeReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStoredPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    isSendingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    lzEndpointLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockChainId(overrides?: CallOverrides): Promise<BigNumber>;

    msgsToDeliver(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextMsgBlocked(overrides?: CallOverrides): Promise<BigNumber>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    receivePayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _dstAddress: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relayerFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    retryPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultAdapterParams(
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDestLzEndpoint(
      destAddr: PromiseOrValue<string>,
      lzEndpointAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleFee(
      _oracleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _zroFee: PromiseOrValue<BigNumberish>,
      _nativeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReceiveVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerPrice(
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSendVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storedPayload(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockNextMsg(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultAdapterParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _userApplication: PromiseOrValue<string>,
      _payload: PromiseOrValue<BytesLike>,
      _payInZRO: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceResumeReceive(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      arg3: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLengthOfQueue(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutboundNonce(
      _chainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendLibraryAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStoredPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReceivingPayload(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSendingPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzEndpointLookup(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    msgsToDeliver(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextMsgBlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outboundNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _dstAddress: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relayerFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retryPayload(
      _srcChainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _chainId: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<BytesLike>,
      _payload: PromiseOrValue<BytesLike>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultAdapterParams(
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDestLzEndpoint(
      destAddr: PromiseOrValue<string>,
      lzEndpointAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleFee(
      _oracleFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _zroFee: PromiseOrValue<BigNumberish>,
      _nativeBP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReceiveVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerPrice(
      _dstPriceRatio: PromiseOrValue<BigNumberish>,
      _dstGasPriceInWei: PromiseOrValue<BigNumberish>,
      _dstNativeAmtCap: PromiseOrValue<BigNumberish>,
      _baseGas: PromiseOrValue<BigNumberish>,
      _gasPerByte: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSendVersion(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storedPayload(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
