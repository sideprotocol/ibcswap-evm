/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAtomicSwap {
  export type CancelSwapMsgStruct = { orderID: PromiseOrValue<BytesLike> };

  export type CancelSwapMsgStructOutput = [string] & { orderID: string };

  export type CoinStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type CoinStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type MakeSwapMsgStruct = {
    sellToken: IAtomicSwap.CoinStruct;
    buyToken: IAtomicSwap.CoinStruct;
    makerSender: PromiseOrValue<string>;
    makerReceiver: PromiseOrValue<string>;
    desiredTaker: PromiseOrValue<string>;
    expireAt: PromiseOrValue<BigNumberish>;
    dstChainID: PromiseOrValue<BigNumberish>;
    poolType: PromiseOrValue<BigNumberish>;
  };

  export type MakeSwapMsgStructOutput = [
    IAtomicSwap.CoinStructOutput,
    IAtomicSwap.CoinStructOutput,
    string,
    string,
    string,
    BigNumber,
    number,
    number
  ] & {
    sellToken: IAtomicSwap.CoinStructOutput;
    buyToken: IAtomicSwap.CoinStructOutput;
    makerSender: string;
    makerReceiver: string;
    desiredTaker: string;
    expireAt: BigNumber;
    dstChainID: number;
    poolType: number;
  };

  export type TakeSwapMsgStruct = {
    orderID: PromiseOrValue<BytesLike>;
    takerReceiver: PromiseOrValue<string>;
  };

  export type TakeSwapMsgStructOutput = [string, string] & {
    orderID: string;
    takerReceiver: string;
  };
}

export interface AtomicSwapV2Interface extends utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "cancelSwap((bytes32))": FunctionFragment;
    "initialize(address,uint16,address)": FunctionFragment;
    "makeSwap(((address,uint256),(address,uint256),address,address,address,uint256,uint16,uint8))": FunctionFragment;
    "onReceivePacket(uint16,bytes,uint64,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapOrderBuyToken(bytes32)": FunctionFragment;
    "swapOrderID(bytes32)": FunctionFragment;
    "swapOrderOperators(bytes32)": FunctionFragment;
    "swapOrderSellToken(bytes32)": FunctionFragment;
    "swapOrderStatus(bytes32)": FunctionFragment;
    "takeSwap((bytes32,address))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "cancelSwap"
      | "initialize"
      | "makeSwap"
      | "onReceivePacket"
      | "owner"
      | "renounceOwnership"
      | "swapOrderBuyToken"
      | "swapOrderID"
      | "swapOrderOperators"
      | "swapOrderSellToken"
      | "swapOrderStatus"
      | "takeSwap"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [IAtomicSwap.CancelSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeSwap",
    values: [IAtomicSwap.MakeSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onReceivePacket",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderBuyToken",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderID",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderOperators",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderSellToken",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOrderStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "takeSwap",
    values: [IAtomicSwap.TakeSwapMsgStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onReceivePacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderBuyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderSellToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ASSERT(string)": EventFragment;
    "AtomicSwapOrderCanceled(bytes32)": EventFragment;
    "AtomicSwapOrderCreated(bytes32)": EventFragment;
    "AtomicSwapOrderTook(address,address,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentReceived(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ASSERT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AtomicSwapOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AtomicSwapOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AtomicSwapOrderTook"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentReceived"): EventFragment;
}

export interface ASSERTEventObject {
  msg: string;
}
export type ASSERTEvent = TypedEvent<[string], ASSERTEventObject>;

export type ASSERTEventFilter = TypedEventFilter<ASSERTEvent>;

export interface AtomicSwapOrderCanceledEventObject {
  id: string;
}
export type AtomicSwapOrderCanceledEvent = TypedEvent<
  [string],
  AtomicSwapOrderCanceledEventObject
>;

export type AtomicSwapOrderCanceledEventFilter =
  TypedEventFilter<AtomicSwapOrderCanceledEvent>;

export interface AtomicSwapOrderCreatedEventObject {
  id: string;
}
export type AtomicSwapOrderCreatedEvent = TypedEvent<
  [string],
  AtomicSwapOrderCreatedEventObject
>;

export type AtomicSwapOrderCreatedEventFilter =
  TypedEventFilter<AtomicSwapOrderCreatedEvent>;

export interface AtomicSwapOrderTookEventObject {
  maker: string;
  taker: string;
  id: string;
}
export type AtomicSwapOrderTookEvent = TypedEvent<
  [string, string, string],
  AtomicSwapOrderTookEventObject
>;

export type AtomicSwapOrderTookEventFilter =
  TypedEventFilter<AtomicSwapOrderTookEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentReceivedEventObject {
  payer: string;
  amount: BigNumber;
  daoShare: BigNumber;
  burned: BigNumber;
}
export type PaymentReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PaymentReceivedEventObject
>;

export type PaymentReceivedEventFilter = TypedEventFilter<PaymentReceivedEvent>;

export interface AtomicSwapV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AtomicSwapV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    cancelSwap(
      cancelswap: IAtomicSwap.CancelSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeSwap(
      makeswap: IAtomicSwap.MakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onReceivePacket(
      _srcChainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapOrderBuyToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    swapOrderID(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        id: string;
        srcChainID: number;
        dstChainID: number;
        poolType: number;
      }
    >;

    swapOrderOperators(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        maker: string;
        taker: string;
        makerReceiver: string;
        takerReceiver: string;
      }
    >;

    swapOrderSellToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    swapOrderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        side: number;
        status: number;
        createdAt: BigNumber;
        canceledAt: BigNumber;
        completedAt: BigNumber;
      }
    >;

    takeSwap(
      takeswap: IAtomicSwap.TakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  cancelSwap(
    cancelswap: IAtomicSwap.CancelSwapMsgStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    admin: PromiseOrValue<string>,
    _chainID: PromiseOrValue<BigNumberish>,
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeSwap(
    makeswap: IAtomicSwap.MakeSwapMsgStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onReceivePacket(
    _srcChainID: PromiseOrValue<BigNumberish>,
    _srcAddress: PromiseOrValue<BytesLike>,
    _nonce: PromiseOrValue<BigNumberish>,
    _payload: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapOrderBuyToken(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

  swapOrderID(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, number] & {
      id: string;
      srcChainID: number;
      dstChainID: number;
      poolType: number;
    }
  >;

  swapOrderOperators(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      maker: string;
      taker: string;
      makerReceiver: string;
      takerReceiver: string;
    }
  >;

  swapOrderSellToken(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

  swapOrderStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber] & {
      side: number;
      status: number;
      createdAt: BigNumber;
      canceledAt: BigNumber;
      completedAt: BigNumber;
    }
  >;

  takeSwap(
    takeswap: IAtomicSwap.TakeSwapMsgStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    cancelSwap(
      cancelswap: IAtomicSwap.CancelSwapMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      admin: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeSwap(
      makeswap: IAtomicSwap.MakeSwapMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onReceivePacket(
      _srcChainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapOrderBuyToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    swapOrderID(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, number] & {
        id: string;
        srcChainID: number;
        dstChainID: number;
        poolType: number;
      }
    >;

    swapOrderOperators(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        maker: string;
        taker: string;
        makerReceiver: string;
        takerReceiver: string;
      }
    >;

    swapOrderSellToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    swapOrderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        side: number;
        status: number;
        createdAt: BigNumber;
        canceledAt: BigNumber;
        completedAt: BigNumber;
      }
    >;

    takeSwap(
      takeswap: IAtomicSwap.TakeSwapMsgStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ASSERT(string)"(msg?: null): ASSERTEventFilter;
    ASSERT(msg?: null): ASSERTEventFilter;

    "AtomicSwapOrderCanceled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderCanceledEventFilter;
    AtomicSwapOrderCanceled(
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderCanceledEventFilter;

    "AtomicSwapOrderCreated(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderCreatedEventFilter;
    AtomicSwapOrderCreated(
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderCreatedEventFilter;

    "AtomicSwapOrderTook(address,address,bytes32)"(
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderTookEventFilter;
    AtomicSwapOrderTook(
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): AtomicSwapOrderTookEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentReceived(address,uint256,uint256,uint256)"(
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      daoShare?: null,
      burned?: null
    ): PaymentReceivedEventFilter;
    PaymentReceived(
      payer?: PromiseOrValue<string> | null,
      amount?: null,
      daoShare?: null,
      burned?: null
    ): PaymentReceivedEventFilter;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSwap(
      cancelswap: IAtomicSwap.CancelSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      admin: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeSwap(
      makeswap: IAtomicSwap.MakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onReceivePacket(
      _srcChainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapOrderBuyToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrderID(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrderOperators(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrderSellToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOrderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeSwap(
      takeswap: IAtomicSwap.TakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSwap(
      cancelswap: IAtomicSwap.CancelSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: PromiseOrValue<string>,
      _chainID: PromiseOrValue<BigNumberish>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeSwap(
      makeswap: IAtomicSwap.MakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onReceivePacket(
      _srcChainID: PromiseOrValue<BigNumberish>,
      _srcAddress: PromiseOrValue<BytesLike>,
      _nonce: PromiseOrValue<BigNumberish>,
      _payload: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapOrderBuyToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrderID(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrderOperators(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrderSellToken(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOrderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeSwap(
      takeswap: IAtomicSwap.TakeSwapMsgStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
