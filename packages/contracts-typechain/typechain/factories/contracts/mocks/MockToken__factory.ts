/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockToken,
  MockTokenInterface,
} from "../../../contracts/mocks/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "failTransferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_value",
        type: "bool",
      },
    ],
    name: "setFailTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000600560006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040516200195c3803806200195c8339818101604052810190620000529190620002dd565b818181600390805190602001906200006c92919062000090565b5080600490805190602001906200008592919062000090565b5050505050620003c7565b8280546200009e9062000391565b90600052602060002090601f016020900481019282620000c257600085556200010e565b82601f10620000dd57805160ff19168380011785556200010e565b828001600101855582156200010e579182015b828111156200010d578251825591602001919060010190620000f0565b5b5090506200011d919062000121565b5090565b5b808211156200013c57600081600090555060010162000122565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001a9826200015e565b810181811067ffffffffffffffff82111715620001cb57620001ca6200016f565b5b80604052505050565b6000620001e062000140565b9050620001ee82826200019e565b919050565b600067ffffffffffffffff8211156200021157620002106200016f565b5b6200021c826200015e565b9050602081019050919050565b60005b83811015620002495780820151818401526020810190506200022c565b8381111562000259576000848401525b50505050565b6000620002766200027084620001f3565b620001d4565b90508281526020810184848401111562000295576200029462000159565b5b620002a284828562000229565b509392505050565b600082601f830112620002c257620002c162000154565b5b8151620002d48482602086016200025f565b91505092915050565b60008060408385031215620002f757620002f66200014a565b5b600083015167ffffffffffffffff8111156200031857620003176200014f565b5b6200032685828601620002aa565b925050602083015167ffffffffffffffff8111156200034a57620003496200014f565b5b6200035885828601620002aa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003aa57607f821691505b60208210811415620003c157620003c062000362565b5b50919050565b61158580620003d76000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806340c10f191161008c578063a457c2d711610066578063a457c2d71461025f578063a9059cbb1461028f578063d17c8d43146102bf578063dd62ed3e146102dd576100ea565b806340c10f19146101f557806370a082311461021157806395d89b4114610241576100ea565b806323b872dd116100c857806323b872dd1461015b578063313ce5671461018b57806339509351146101a95780633c57c565146101d9576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b6100f761030d565b6040516101049190610d7a565b60405180910390f35b61012760048036038101906101229190610e35565b61039f565b6040516101349190610e90565b60405180910390f35b6101456103c2565b6040516101529190610eba565b60405180910390f35b61017560048036038101906101709190610ed5565b6103cc565b6040516101829190610e90565b60405180910390f35b610193610401565b6040516101a09190610f44565b60405180910390f35b6101c360048036038101906101be9190610e35565b61040a565b6040516101d09190610e90565b60405180910390f35b6101f360048036038101906101ee9190610f8b565b610441565b005b61020f600480360381019061020a9190610e35565b61045e565b005b61022b60048036038101906102269190610fb8565b61046c565b6040516102389190610eba565b60405180910390f35b6102496104b4565b6040516102569190610d7a565b60405180910390f35b61027960048036038101906102749190610e35565b610546565b6040516102869190610e90565b60405180910390f35b6102a960048036038101906102a49190610e35565b6105bd565b6040516102b69190610e90565b60405180910390f35b6102c76105e0565b6040516102d49190610e90565b60405180910390f35b6102f760048036038101906102f29190610fe5565b6105f3565b6040516103049190610eba565b60405180910390f35b60606003805461031c90611054565b80601f016020809104026020016040519081016040528092919081815260200182805461034890611054565b80156103955780601f1061036a57610100808354040283529160200191610395565b820191906000526020600020905b81548152906001019060200180831161037857829003601f168201915b5050505050905090565b6000806103aa61067a565b90506103b7818585610682565b600191505092915050565b6000600254905090565b6000600560009054906101000a900460ff16156103ec57600090506103fa565b6103f784848461084d565b90505b9392505050565b60006012905090565b60008061041561067a565b905061043681858561042785896105f3565b61043191906110b5565b610682565b600191505092915050565b80600560006101000a81548160ff02191690831515021790555050565b610468828261087c565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104c390611054565b80601f01602080910402602001604051908101604052809291908181526020018280546104ef90611054565b801561053c5780601f106105115761010080835404028352916020019161053c565b820191906000526020600020905b81548152906001019060200180831161051f57829003601f168201915b5050505050905090565b60008061055161067a565b9050600061055f82866105f3565b9050838110156105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b9061117d565b60405180910390fd5b6105b18286868403610682565b60019250505092915050565b6000806105c861067a565b90506105d58185856109d3565b600191505092915050565b600560009054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e99061120f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610759906112a1565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108409190610eba565b60405180910390a3505050565b60008061085861067a565b9050610865858285610c4b565b6108708585856109d3565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e39061130d565b60405180910390fd5b6108f860008383610cd7565b806002600082825461090a91906110b5565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109bb9190610eba565b60405180910390a36109cf60008383610cdc565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3a9061139f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ab3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaa90611431565b60405180910390fd5b610abe838383610cd7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b906114c3565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c329190610eba565b60405180910390a3610c45848484610cdc565b50505050565b6000610c5784846105f3565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610cd15781811015610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba9061152f565b60405180910390fd5b610cd08484848403610682565b5b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1b578082015181840152602081019050610d00565b83811115610d2a576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d4c82610ce1565b610d568185610cec565b9350610d66818560208601610cfd565b610d6f81610d30565b840191505092915050565b60006020820190508181036000830152610d948184610d41565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dcc82610da1565b9050919050565b610ddc81610dc1565b8114610de757600080fd5b50565b600081359050610df981610dd3565b92915050565b6000819050919050565b610e1281610dff565b8114610e1d57600080fd5b50565b600081359050610e2f81610e09565b92915050565b60008060408385031215610e4c57610e4b610d9c565b5b6000610e5a85828601610dea565b9250506020610e6b85828601610e20565b9150509250929050565b60008115159050919050565b610e8a81610e75565b82525050565b6000602082019050610ea56000830184610e81565b92915050565b610eb481610dff565b82525050565b6000602082019050610ecf6000830184610eab565b92915050565b600080600060608486031215610eee57610eed610d9c565b5b6000610efc86828701610dea565b9350506020610f0d86828701610dea565b9250506040610f1e86828701610e20565b9150509250925092565b600060ff82169050919050565b610f3e81610f28565b82525050565b6000602082019050610f596000830184610f35565b92915050565b610f6881610e75565b8114610f7357600080fd5b50565b600081359050610f8581610f5f565b92915050565b600060208284031215610fa157610fa0610d9c565b5b6000610faf84828501610f76565b91505092915050565b600060208284031215610fce57610fcd610d9c565b5b6000610fdc84828501610dea565b91505092915050565b60008060408385031215610ffc57610ffb610d9c565b5b600061100a85828601610dea565b925050602061101b85828601610dea565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061106c57607f821691505b602082108114156110805761107f611025565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110c082610dff565b91506110cb83610dff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611100576110ff611086565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611167602583610cec565b91506111728261110b565b604082019050919050565b600060208201905081810360008301526111968161115a565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111f9602483610cec565b91506112048261119d565b604082019050919050565b60006020820190508181036000830152611228816111ec565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061128b602283610cec565b91506112968261122f565b604082019050919050565b600060208201905081810360008301526112ba8161127e565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006112f7601f83610cec565b9150611302826112c1565b602082019050919050565b60006020820190508181036000830152611326816112ea565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611389602583610cec565b91506113948261132d565b604082019050919050565b600060208201905081810360008301526113b88161137c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061141b602383610cec565b9150611426826113bf565b604082019050919050565b6000602082019050818103600083015261144a8161140e565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006114ad602683610cec565b91506114b882611451565b604082019050919050565b600060208201905081810360008301526114dc816114a0565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611519601d83610cec565b9150611524826114e3565b602082019050919050565b600060208201905081810360008301526115488161150c565b905091905056fea264697066735822122024a76a41ecd3b956a7667797a42b49df0f5b6e2dc8b0b8b2247c1dc580e18f8b64736f6c63430008090033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockToken> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockToken>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  override connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
