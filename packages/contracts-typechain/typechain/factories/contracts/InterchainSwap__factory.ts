/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  InterchainSwap,
  InterchainSwapInterface,
} from "../../contracts/InterchainSwap";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "daoShare",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "burned",
        type: "uint256",
      },
    ],
    name: "PaymentReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b5060805161135861007a6000396000818160df0152818161016e01528181610268015281816102f701526103a701526113586000f3fe60806040526004361061003f5760003560e01c80633659cfe6146100445780634f1ef2861461006d57806352d1902d14610089578063c4d66de8146100b4575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610ac0565b6100dd565b005b61008760048036038101906100829190610c33565b610266565b005b34801561009557600080fd5b5061009e6103a3565b6040516100ab9190610ca8565b60405180910390f35b3480156100c057600080fd5b506100db60048036038101906100d69190610ac0565b61045c565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561016c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016390610d46565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166101ab610593565b73ffffffffffffffffffffffffffffffffffffffff1614610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f890610dd8565b60405180910390fd5b61020a816105ea565b61026381600067ffffffffffffffff81111561022957610228610b08565b5b6040519080825280601f01601f19166020018201604052801561025b5781602001600182028036833780820191505090505b5060006105ed565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156102f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ec90610d46565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610334610593565b73ffffffffffffffffffffffffffffffffffffffff161461038a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038190610dd8565b60405180910390fd5b610393826105ea565b61039f828260016105ed565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90610e6a565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b60008060019054906101000a900460ff1615905080801561048d5750600160008054906101000a900460ff1660ff16105b806104ba575061049c3061076a565b1580156104b95750600160008054906101000a900460ff1660ff16145b5b6104f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f090610efc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610536576001600060016101000a81548160ff0219169083151502179055505b801561058f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105869190610f6e565b60405180910390a15b5050565b60006105c17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61078d565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b50565b6106197f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b610797565b60000160009054906101000a900460ff161561063d57610638836107a1565b610765565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561068357600080fd5b505afa9250505080156106b457506040513d601f19601f820116820180604052508101906106b19190610fb5565b60015b6106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90611054565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114610758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074f906110e6565b60405180910390fd5b5061076483838361085a565b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b6000819050919050565b6107aa8161076a565b6107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611178565b60405180910390fd5b806108167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61078d565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61086383610886565b6000825111806108705750805b156108815761087f83836108d5565b505b505050565b61088f816107a1565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606108fa83836040518060600160405280602781526020016112fc60279139610902565b905092915050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161092c9190611212565b600060405180830381855af49150503d8060008114610967576040519150601f19603f3d011682016040523d82523d6000602084013e61096c565b606091505b509150915061097d86838387610988565b925050509392505050565b606083156109eb576000835114156109e3576109a38561076a565b6109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d990611275565b60405180910390fd5b5b8290506109f6565b6109f583836109fe565b5b949350505050565b600082511115610a115781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4591906112d9565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8d82610a62565b9050919050565b610a9d81610a82565b8114610aa857600080fd5b50565b600081359050610aba81610a94565b92915050565b600060208284031215610ad657610ad5610a58565b5b6000610ae484828501610aab565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b4082610af7565b810181811067ffffffffffffffff82111715610b5f57610b5e610b08565b5b80604052505050565b6000610b72610a4e565b9050610b7e8282610b37565b919050565b600067ffffffffffffffff821115610b9e57610b9d610b08565b5b610ba782610af7565b9050602081019050919050565b82818337600083830152505050565b6000610bd6610bd184610b83565b610b68565b905082815260208101848484011115610bf257610bf1610af2565b5b610bfd848285610bb4565b509392505050565b600082601f830112610c1a57610c19610aed565b5b8135610c2a848260208601610bc3565b91505092915050565b60008060408385031215610c4a57610c49610a58565b5b6000610c5885828601610aab565b925050602083013567ffffffffffffffff811115610c7957610c78610a5d565b5b610c8585828601610c05565b9150509250929050565b6000819050919050565b610ca281610c8f565b82525050565b6000602082019050610cbd6000830184610c99565b92915050565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000610d30602c83610cc3565b9150610d3b82610cd4565b604082019050919050565b60006020820190508181036000830152610d5f81610d23565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000610dc2602c83610cc3565b9150610dcd82610d66565b604082019050919050565b60006020820190508181036000830152610df181610db5565b9050919050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000610e54603883610cc3565b9150610e5f82610df8565b604082019050919050565b60006020820190508181036000830152610e8381610e47565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610ee6602e83610cc3565b9150610ef182610e8a565b604082019050919050565b60006020820190508181036000830152610f1581610ed9565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000610f58610f53610f4e84610f1c565b610f33565b610f26565b9050919050565b610f6881610f3d565b82525050565b6000602082019050610f836000830184610f5f565b92915050565b610f9281610c8f565b8114610f9d57600080fd5b50565b600081519050610faf81610f89565b92915050565b600060208284031215610fcb57610fca610a58565b5b6000610fd984828501610fa0565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061103e602e83610cc3565b915061104982610fe2565b604082019050919050565b6000602082019050818103600083015261106d81611031565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006110d0602983610cc3565b91506110db82611074565b604082019050919050565b600060208201905081810360008301526110ff816110c3565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000611162602d83610cc3565b915061116d82611106565b604082019050919050565b6000602082019050818103600083015261119181611155565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156111cc5780820151818401526020810190506111b1565b838111156111db576000848401525b50505050565b60006111ec82611198565b6111f681856111a3565b93506112068185602086016111ae565b80840191505092915050565b600061121e82846111e1565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061125f601d83610cc3565b915061126a82611229565b602082019050919050565b6000602082019050818103600083015261128e81611252565b9050919050565b600081519050919050565b60006112ab82611295565b6112b58185610cc3565b93506112c58185602086016111ae565b6112ce81610af7565b840191505092915050565b600060208201905081810360008301526112f381846112a0565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220aab1e976e146e805aee27dca46f73dc2ffc9a76d03c82b4790254c0b6f3f800a64736f6c63430008090033";

type InterchainSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InterchainSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InterchainSwap__factory extends ContractFactory {
  constructor(...args: InterchainSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InterchainSwap> {
    return super.deploy(overrides || {}) as Promise<InterchainSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InterchainSwap {
    return super.attach(address) as InterchainSwap;
  }
  override connect(signer: Signer): InterchainSwap__factory {
    return super.connect(signer) as InterchainSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterchainSwapInterface {
    return new utils.Interface(_abi) as InterchainSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InterchainSwap {
    return new Contract(address, _abi, signerOrProvider) as InterchainSwap;
  }
}
