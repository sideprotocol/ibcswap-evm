/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AtomicSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AtomicSwap__factory>;
    getContractFactory(
      name: "InterchainSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterchainSwap__factory>;
    getContractFactory(
      name: "IAtomicSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAtomicSwap__factory>;
    getContractFactory(
      name: "IInterchainSwap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterchainSwap__factory>;
    getContractFactory(
      name: "ISideOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISideOracle__factory>;
    getContractFactory(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: "ILayerZeroEndpointUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpointUpgradeable__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "ILayerZeroReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ILayerZeroUserApplicationConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: "ILayerZeroUserApplicationConfigUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfigUpgradeable__factory>;
    getContractFactory(
      name: "IStargateFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateFactory__factory>;
    getContractFactory(
      name: "IStargatePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargatePool__factory>;
    getContractFactory(
      name: "IStargateReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateReceiver__factory>;
    getContractFactory(
      name: "IStargateRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateRouter__factory>;
    getContractFactory(
      name: "IStargateRouterETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateRouterETH__factory>;
    getContractFactory(
      name: "IStargateWidget",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStargateWidget__factory>;
    getContractFactory(
      name: "IMedianizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMedianizer__factory>;
    getContractFactory(
      name: "IStdReference",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStdReference__factory>;
    getContractFactory(
      name: "LzAppUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LzAppUpgradeable__factory>;
    getContractFactory(
      name: "NonblockingLzAppUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonblockingLzAppUpgradeable__factory>;
    getContractFactory(
      name: "LZEndpointMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LZEndpointMock__factory>;
    getContractFactory(
      name: "AtomicSwapV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AtomicSwapV2__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AtomicSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AtomicSwap>;
    getContractAt(
      name: "InterchainSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterchainSwap>;
    getContractAt(
      name: "IAtomicSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAtomicSwap>;
    getContractAt(
      name: "IInterchainSwap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterchainSwap>;
    getContractAt(
      name: "ISideOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISideOracle>;
    getContractAt(
      name: "ILayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: "ILayerZeroEndpointUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpointUpgradeable>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "ILayerZeroReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiverUpgradeable>;
    getContractAt(
      name: "ILayerZeroUserApplicationConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: "ILayerZeroUserApplicationConfigUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfigUpgradeable>;
    getContractAt(
      name: "IStargateFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateFactory>;
    getContractAt(
      name: "IStargatePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargatePool>;
    getContractAt(
      name: "IStargateReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateReceiver>;
    getContractAt(
      name: "IStargateRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateRouter>;
    getContractAt(
      name: "IStargateRouterETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateRouterETH>;
    getContractAt(
      name: "IStargateWidget",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStargateWidget>;
    getContractAt(
      name: "IMedianizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMedianizer>;
    getContractAt(
      name: "IStdReference",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStdReference>;
    getContractAt(
      name: "LzAppUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LzAppUpgradeable>;
    getContractAt(
      name: "NonblockingLzAppUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonblockingLzAppUpgradeable>;
    getContractAt(
      name: "LZEndpointMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LZEndpointMock>;
    getContractAt(
      name: "AtomicSwapV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AtomicSwapV2>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
